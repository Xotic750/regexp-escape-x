{"version":3,"sources":["../src/regexp-escape-x.js"],"names":[],"mappings":"AAAA,OAAO,wBAAP,MAAqC,+BAArC;AACA,OAAO,SAAP,MAAsB,oBAAtB;AAEA,IAAM,WAAW,GAAG,sBAApB;AACA,IAAM,eAAe,GAAG,MAAxB;AACA,IAAM,iBAAiB,GAAG,SAAS,CAAC,eAAe,CAAC,OAAjB,CAAnC;AAEA;;;;;;;;AAOA,IAAM,YAAY,GAAG,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AACjD,SAAO,iBAAiB,CAAC,wBAAwB,CAAC,MAAD,CAAzB,EAAmC,WAAnC,EAAgD,eAAhD,CAAxB;AACD,CAFD;;AAIA,eAAe,YAAf","file":"regexp-escape-x.esm.js","sourcesContent":["import requireCoercibleToString from 'require-coercible-to-string-x';\nimport methodize from 'simple-methodize-x';\n\nconst syntaxChars = /[\\^$\\\\.*+?()[\\]{}|]/g;\nconst REPLACE_PATTERN = '\\\\$&';\nconst methodizedReplace = methodize(REPLACE_PATTERN.replace);\n\n/**\n * Method to safely escape `RegExp` special tokens for use in `new RegExp`.\n *\n * @param {string} string - The string to be escaped.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @returns {string} The escaped string.\n */\nconst regExpEscape = function regExpEscape(string) {\n  return methodizedReplace(requireCoercibleToString(string), syntaxChars, REPLACE_PATTERN);\n};\n\nexport default regExpEscape;\n"]}